#!/bin/bash

# Source utilities
source "$(dirname "${BASH_SOURCE[0]}")/../utils/core-utils.sh"
source "$(dirname "${BASH_SOURCE[0]}")/../utils/git-utils.sh"
source "$(dirname "${BASH_SOURCE[0]}")/../utils/version.sh"

# Set Git's exec-path to help Git find man pages
export GIT_EXEC_PATH="$(dirname "${BASH_SOURCE[0]}"):$(git --exec-path)"

# Show version information
show_version() {
    show_command_version "Wrapup" "Prepare and create a pull request"
}

# Show usage information
show_usage() {
    # Format help output in a way that our man page generator can parse
    cat << EOF
git-wrapup - Prepare and create a pull request

Usage: git wrapup [options] <commit-message>

Description:
    Streamlines the process of preparing changes and creating a pull request:
    1. Optionally creates or switches to a feature branch
    2. Stages all changes
    3. Commits with the provided message
    4. Pushes to remote
    5. Opens pull request in browser
    
Options:
    -h, --help                     Show this help message
    -v, --version                  Show version information
    -b, --branch <branch-name>     Create or switch to specified branch before changes
                                  (allows running from develop branch)

Examples:
    git wrapup "feat: add new feature"
    git wrapup -b feature/new-thing "feat: add new feature"

See git help wrapup for full documentation
EOF
    exit 0
}

# Main function
main() {
    # Parse arguments
    local target_branch=""
    local commit_msg=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                ;;
            -v|--version)
                show_version
                ;;
            -b|--branch)
                if [ -z "$2" ]; then
                    error_exit "Branch name is required for -b|--branch option"
                fi
                target_branch="$2"
                shift 2
                ;;
            *)
                if [ -z "$commit_msg" ]; then
                    commit_msg="$1"
                else
                    error_exit "Unexpected argument: $1"
                fi
                shift
                ;;
        esac
    done
    
    # Validate commit message
    if [ -z "$commit_msg" ]; then
        error_exit "Commit message is required"
    fi
    validate_commit_message "$commit_msg"
    
    # Get current branch
    local current_branch
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    print_info "üîÑ Current branch: ${current_branch}"
    
    # Handle branch switching if requested
    if [ -n "$target_branch" ]; then
        handle_target_branch "$target_branch"
        current_branch="$target_branch"
    elif [ "$current_branch" = "develop" ]; then
        error_exit "Cannot commit directly to develop branch. Use -b option to specify a feature branch"
    fi
    
    # Stage and commit changes
    commit_changes "$commit_msg"
    
    # Push changes to remote
    push_changes "$current_branch"
    
    # Open pull request URL
    print_info "üåê Opening pull request page..."
    open_pull_request_url "$current_branch"
    
    print_success "Wrapup complete! Review the pull request in your browser."
}

# Check for help flag first
if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
    show_usage
fi

# Run the main function with all arguments
main "$@"
