#!/bin/bash

# Source git utilities
source "$(dirname "$(dirname "$0")")/utils/git-utils"

# Color codes for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Error handler function
error_exit() {
    echo -e "${RED}‚ùå Error: $1${NC}"
    exit 1
}

# Show usage information
show_usage() {
    echo "Usage: git wrapup [options] <commit-message>"
    echo ""
    echo "Options:"
    echo "  -b, --branch <branch-name>  Create or switch to specified branch before changes"
    echo "                              (allows running from develop branch)"
    echo ""
    echo "Examples:"
    echo "  git wrapup \"feat: add new feature\""
    echo "  git wrapup -b feature/new-thing \"feat: add new feature\""
    exit 1
}

# Parse arguments
TARGET_BRANCH=""
COMMIT_MSG=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -b|--branch)
            if [ -z "$2" ]; then
                error_exit "Branch name is required for -b|--branch option"
            fi
            TARGET_BRANCH="$2"
            shift 2
            ;;
        -h|--help)
            show_usage
            ;;
        *)
            if [ -z "$COMMIT_MSG" ]; then
                COMMIT_MSG=$(echo "$1" | tr '[:upper:]' '[:lower:]')
            else
                error_exit "Unexpected argument: $1"
            fi
            shift
            ;;
    esac
done

# Check if commit message was provided
if [ -z "$COMMIT_MSG" ]; then
    show_usage
fi

# Get the current branch name
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# Handle branch switching if target branch is specified
if [ -n "$TARGET_BRANCH" ]; then
    echo -e "${YELLOW}üîÑ Checking branch: ${TARGET_BRANCH}${NC}"
    
    # Check if branch exists
    if git show-ref --verify --quiet "refs/heads/$TARGET_BRANCH"; then
        # Branch exists, switch to it
        echo -e "${YELLOW}‚ö° Switching to existing branch: ${TARGET_BRANCH}${NC}"
        git checkout "$TARGET_BRANCH" || error_exit "Failed to switch to $TARGET_BRANCH"
    else
        # Create new branch
        echo -e "${YELLOW}‚ú® Creating new branch: ${TARGET_BRANCH}${NC}"
        git checkout -b "$TARGET_BRANCH" || error_exit "Failed to create branch $TARGET_BRANCH"
    fi
    CURRENT_BRANCH="$TARGET_BRANCH"
else
    # Without target branch, maintain original restriction
    if [ "$CURRENT_BRANCH" == "develop" ] || [ "$CURRENT_BRANCH" == "main" ]; then
        error_exit "Cannot run this command on develop or main branch without --branch option"
    fi
fi

# Check if we have any stashed changes already
STASH_COUNT=$(git stash list | wc -l)

echo -e "${YELLOW}üîÑ Starting wrapup process for branch: ${CURRENT_BRANCH}${NC}"

# Stash everything (including untracked files)
echo -e "${YELLOW}üíæ Preserving all current changes...${NC}"
git stash -u || error_exit "Failed to stash changes"

# Pull and rebase from develop
echo -e "${YELLOW}üì• Pulling and rebasing from develop...${NC}"
if ! git pull origin develop --rebase; then
    # If there was a stash, try to pop it back
    if [ "$(git stash list | wc -l)" -gt "$STASH_COUNT" ]; then
        echo -e "${YELLOW}üîÑ Restoring your changes...${NC}"
        git stash pop
    fi
    error_exit "Failed to rebase from develop. Your changes have been preserved"
fi

# Pop stash if we stashed anything
if [ "$(git stash list | wc -l)" -gt "$STASH_COUNT" ]; then
    echo -e "${YELLOW}üì§ Restoring your changes...${NC}"
    if ! git stash pop; then
        error_exit "Stash pop failed. Please resolve conflicts manually and run 'git stash drop' after"
    fi
fi

# Run pnpm changeset
echo -e "${YELLOW}üìù Running changeset...${NC}"
if ! pnpm changeset; then
    error_exit "pnpm changeset command failed"
fi

# Stage all changes
echo -e "${YELLOW}üìã Staging all changes...${NC}"
git add . || error_exit "Failed to stage changes"

# Show what's being committed
echo -e "${YELLOW}üìä Changes to be committed:${NC}"
git status --short

# Commit with the provided message
echo -e "${YELLOW}üíæ Committing changes...${NC}"
git commit -m "$COMMIT_MSG" || error_exit "Failed to commit changes"

# Push the current branch upstream
echo -e "${YELLOW}üì§ Pushing changes...${NC}"
if ! git push --set-upstream origin "$CURRENT_BRANCH"; then
    error_exit "Failed to push changes. Please pull latest changes and try again"
fi

# Open pull request URL
echo -e "${YELLOW}üîó Opening pull request...${NC}"
open_pull_request_url "$CURRENT_BRANCH"

echo -e "${GREEN}‚ú® Wrapup complete! Your changes are ready for review.${NC}"
