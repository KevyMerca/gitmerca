#!/bin/bash

# Source utilities
source "$(dirname "${BASH_SOURCE[0]}")/../utils/core-utils.sh"
source "$(dirname "${BASH_SOURCE[0]}")/../utils/git-utils.sh"
source "$(dirname "${BASH_SOURCE[0]}")/../utils/version.sh"

# Set Git's exec-path to help Git find man pages
export GIT_EXEC_PATH="$(dirname "${BASH_SOURCE[0]}"):$(git --exec-path)"

# Show version information
show_version() {
    show_command_version "Cleanup" "Remove all local branches except develop"
}

# Show usage information
show_usage() {
    # Format help output in a way that our man page generator can parse
    cat << EOF
git-cleanup - Remove all local branches except 'develop'

Usage: git cleanup [options]

Description:
    Removes all local branches except 'develop' to keep your workspace tidy.
    By default, shows branches to be deleted and asks for confirmation.
    
Options:
    -h, --help     Show this help message
    -y, --yes      Skip confirmation prompt

See git help cleanup for full documentation
EOF
    exit 0
}

# Main function

# Main function
main() {
    # Parse arguments
    local skip_confirm=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                ;;
            -v|--version)
                show_version
                ;;
            -y|--yes)
                skip_confirm=true
                shift
                ;;
            *)
                error_exit "Unknown option: $1. Use --help for usage information."
                ;;
        esac
    done
    
    # Check if we're on develop branch
    local current_branch
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    if [ "$current_branch" != "develop" ]; then
        print_warning "You are not on the develop branch"
        if ! $skip_confirm && ! confirm "Continue anyway?"; then
            print_info "Operation cancelled"
            exit 0
        fi
    fi
    
    # Get list of branches to delete
    local branches
    readarray -t branches < <(get_branches_except_develop)
    
    if [ ${#branches[@]} -eq 0 ]; then
        print_success "No branches to clean up!"
        exit 0
    fi
    
    # Show branches to be deleted
    print_info "The following branches will be deleted:"
    printf "%s\n" "${branches[@]}"
    echo ""
    
    # Confirm unless -y flag was used
    if ! $skip_confirm && ! confirm "Delete these branches?"; then
        print_info "Operation cancelled"
        exit 0
    fi
    
    # Delete branches
    delete_branches "${branches[@]}"
}

# Check for help flag first
if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
    show_usage
fi

# Run the main function with all arguments
main "$@"
