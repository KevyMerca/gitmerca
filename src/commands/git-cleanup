#!/bin/bash

# Color codes for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Error handler function
error_exit() {
    echo -e "${RED}‚ùå Error: $1${NC}"
    exit 1
}

# Show usage information
show_usage() {
    echo "Usage: git cleanup [options]"
    echo ""
    echo "Options:"
    echo "  -h, --help     Show this help message"
    echo "  -y, --yes      Skip confirmation prompt"
    echo ""
    echo "Description:"
    echo "  Removes all local branches except 'develop' to keep your workspace tidy."
    echo "  By default, shows branches to be deleted and asks for confirmation."
    exit 1
}

# Parse arguments
SKIP_CONFIRM=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            ;;
        -y|--yes)
            SKIP_CONFIRM=true
            shift
            ;;
        *)
            error_exit "Unknown option: $1. Use --help for usage information."
            ;;
    esac
done

# Get list of branches to delete
BRANCHES_TO_DELETE=$(git branch | grep -vE "(develop|^\*)")

if [ -z "$BRANCHES_TO_DELETE" ]; then
    echo -e "${GREEN}‚ú® No branches to clean up - your workspace is already tidy!${NC}"
    exit 0
fi

# Count branches to be deleted
BRANCH_COUNT=$(echo "$BRANCHES_TO_DELETE" | wc -l)

echo -e "${YELLOW}üßπ This will delete the following local branches:${NC}"
echo "$BRANCHES_TO_DELETE"
echo -e "${YELLOW}Total branches to delete: ${BRANCH_COUNT}${NC}"
echo -e "${YELLOW}The 'develop' branch will be preserved.${NC}"

if [ "$SKIP_CONFIRM" = false ]; then
    read -p "Continue with cleanup? (y/N) " confirm

    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        echo -e "${GREEN}Cleanup cancelled. No branches were deleted.${NC}"
        exit 0
    fi
fi

echo -e "${YELLOW}üóëÔ∏è  Cleaning up branches...${NC}"
echo "$BRANCHES_TO_DELETE" | xargs git branch -D
echo -e "${GREEN}‚ú® Cleanup complete! Your git workspace is now tidy.${NC}"
