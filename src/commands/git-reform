#!/bin/bash

# Color codes for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Error handler function
error_exit() {
    echo -e "${RED}‚ùå Error: $1${NC}"
    exit 1
}

# Show usage information
show_usage() {
    echo "Usage: git reform [options] [target-branch]"
    echo ""
    echo "Options:"
    echo "  -h, --help               Show this help message"
    echo "  -f, --force             Skip confirmation prompt"
    echo ""
    echo "Arguments:"
    echo "  target-branch           Optional branch to create or switch to after rebase"
    echo ""
    echo "Description:"
    echo "  Streamlines branch management according to mercateam patterns:"
    echo "  1. Stashes your current changes"
    echo "  2. Rebases from develop"
    echo "  3. Optionally switches to or creates target branch"
    echo "  4. Restores your changes"
    echo ""
    echo "Examples:"
    echo "  git reform                     # Rebase current branch from develop"
    echo "  git reform feature/new-thing   # Rebase and switch to feature branch"
    exit 1
}

# Parse arguments
SKIP_CONFIRM=false
TARGET_BRANCH=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            ;;
        -f|--force)
            SKIP_CONFIRM=true
            shift
            ;;
        -*)
            error_exit "Unknown option: $1. Use --help for usage information."
            ;;
        *)
            if [ -z "$TARGET_BRANCH" ]; then
                TARGET_BRANCH="$1"
            else
                error_exit "Unexpected argument: $1"
            fi
            shift
            ;;
    esac
done

# Get the current branch name
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo -e "${YELLOW}üîÑ Current branch: ${CURRENT_BRANCH}${NC}"

# Check if the target branch exists
if [ -n "$TARGET_BRANCH" ]; then
    echo -e "${YELLOW}üîç Checking target branch: ${TARGET_BRANCH}${NC}"
    if git show-ref --verify --quiet refs/heads/"$TARGET_BRANCH"; then
        echo -e "${YELLOW}üìç Target branch exists${NC}"
        BRANCH_EXISTS=true
    else
        echo -e "${YELLOW}‚ú® Will create new branch: ${TARGET_BRANCH}${NC}"
        BRANCH_EXISTS=false
    fi
fi

# Check for changes to stash
if ! git diff-index --quiet HEAD --; then
    echo -e "${YELLOW}üì¶ Found changes to preserve${NC}"
    if [ "$SKIP_CONFIRM" = false ]; then
        read -p "Continue with stash and rebase? (y/N) " confirm
        if [[ ! $confirm =~ ^[Yy]$ ]]; then
            echo -e "${GREEN}Operation cancelled. No changes were made.${NC}"
            exit 0
        fi
    fi
    
    echo -e "${YELLOW}üíæ Stashing changes...${NC}"
    if ! git stash save "Auto-stash before rebase"; then
        error_exit "Failed to stash changes"
    fi
    STASH_CREATED=true
else
    echo -e "${YELLOW}üìù No local changes to preserve${NC}"
    STASH_CREATED=false
fi

# Handle rebase
if [ "$CURRENT_BRANCH" = "develop" ]; then
    echo -e "${YELLOW}üì• Updating develop branch...${NC}"
    if ! git rebase; then
        error_exit "Failed to rebase develop branch"
    fi
else
    echo -e "${YELLOW}üì• Rebasing from develop...${NC}"
    if ! git pull origin develop --rebase; then
        if [ "$STASH_CREATED" = true ]; then
            echo -e "${YELLOW}üîÑ Restoring changes...${NC}"
            git stash pop
        fi
        error_exit "Failed to rebase from develop"
    fi
fi

# Handle target branch
if [ -n "$TARGET_BRANCH" ]; then
    if [ "$BRANCH_EXISTS" = true ]; then
        echo -e "${YELLOW}‚ö° Switching to existing branch: ${TARGET_BRANCH}${NC}"
        if ! git checkout "$TARGET_BRANCH"; then
            error_exit "Failed to switch to $TARGET_BRANCH"
        fi
    else
        echo -e "${YELLOW}‚ú® Creating new branch: ${TARGET_BRANCH}${NC}"
        if ! git checkout -b "$TARGET_BRANCH"; then
            error_exit "Failed to create branch $TARGET_BRANCH"
        fi
    fi
fi

# Restore changes if they were stashed
if [ "$STASH_CREATED" = true ]; then
    echo -e "${YELLOW}üì§ Restoring changes...${NC}"
    if ! git stash pop; then
        error_exit "Failed to restore changes. Your changes are preserved in the stash"
    fi
fi

echo -e "${GREEN}‚ú® Reform complete! Your branch is up to date.${NC}"
