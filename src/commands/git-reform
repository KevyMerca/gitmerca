#!/bin/bash

# Source utilities
source "$(dirname "${BASH_SOURCE[0]}")/../utils/core-utils.sh"
source "$(dirname "${BASH_SOURCE[0]}")/../utils/git-utils.sh"
source "$(dirname "${BASH_SOURCE[0]}")/../utils/version.sh"

# Set Git's exec-path to help Git find man pages
export GIT_EXEC_PATH="$(dirname "${BASH_SOURCE[0]}"):$(git --exec-path)"

# Show version information
show_version() {
    show_command_version "Reform" "Streamline branch management according to mercateam patterns"
}

# Show usage information
show_usage() {
    # Format help output in a way that our man page generator can parse
    cat << EOF
git-reform - Streamline branch management according to mercateam patterns

Usage: git reform [options] [target-branch]

Description:
    Streamlines branch management according to mercateam patterns:
    1. Stashes your current changes
    2. Rebases from develop
    3. Optionally switches to or creates target branch
    
Options:
    -h, --help               Show this help message
    -f, --force             Skip confirmation prompt

Arguments:
    target-branch           Optional branch to create or switch to after rebase

See git help reform for full documentation
EOF
    exit 0
}

# Main function

# Main function
main() {
    # Parse arguments
    SKIP_CONFIRM=false
    TARGET_BRANCH=""
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                ;;
            -f|--force)
                SKIP_CONFIRM=true
                shift
                ;;
            -*)
                error_exit "Unknown option: $1. Use --help for usage information."
                ;;
            *)
                if [ -z "$TARGET_BRANCH" ]; then
                    TARGET_BRANCH="$1"
                else
                    error_exit "Unexpected argument: $1"
                fi
                shift
                ;;
        esac
    done

    # Get the current branch name
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    print_info "🔄 Current branch: ${CURRENT_BRANCH}"

    # Check if the target branch exists
    BRANCH_EXISTS=false
    if [ -n "$TARGET_BRANCH" ]; then
        print_info "🔍 Checking target branch: ${TARGET_BRANCH}"
        if branch_exists "$TARGET_BRANCH"; then
            print_info "📍 Target branch exists"
            BRANCH_EXISTS=true
        else
            print_info "✨ Will create new branch: ${TARGET_BRANCH}"
        fi
    fi

    # Stash changes
    STASH_CREATED=false
    if [ "$(git status --porcelain)" ]; then
        stash_changes
        STASH_CREATED=true
    fi

    # Handle rebase
    rebase_branch "$CURRENT_BRANCH"

    # Handle target branch
    if [ -n "$TARGET_BRANCH" ]; then
        handle_target_branch "$TARGET_BRANCH" "$BRANCH_EXISTS"
    fi

    # Restore changes if they were stashed
    if [ "$STASH_CREATED" = true ]; then
        restore_stash
    fi

    print_success "Reform complete! Your branch is up to date."
}

# Check for help flag first
if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
    show_usage
fi

# Run the main function with all arguments
main "$@"
